import Button from '@/components/Button';
import FeedbackSection from '@/components/FeedbackSection';
import ProblemContainer, { Problem } from '@/components/ProblemContainer';
import { db } from '@/services/database';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, Keyboard, StyleSheet, Text, TextInput, View } from 'react-native';

export default function Index() {
  const [currentProblem, setCurrentProblem] = useState<Problem | null>(null);
  const [userAnswer, setUserAnswer] = useState('');
  const [showFeedback, setShowFeedback] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Initialize database and load first problem
  useEffect(() => {
    initializeApp();
  }, []);

  const initializeApp = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // Initialize database
      const dbInitialized = await db.init();
      if (!dbInitialized) {
        throw new Error('Failed to initialize database');
      }

      // Seed dummy data for development
      await db.seedDummy();

      // Load first problem
      await loadNextProblem();
    } catch (err) {
      console.error('Failed to initialize app:', err);
      setError('Failed to initialize app. Please restart.');
    } finally {
      setIsLoading(false);
    }
  };

  const loadNextProblem = async () => {
    try {
      const problem = await db.getNextProblem();
      if (problem) {
        setCurrentProblem(problem);
        setUserAnswer('');
        setShowFeedback(false);
      } else {
        setError('No more problems available!');
      }
    } catch (err) {
      console.error('Failed to load problem:', err);
      setError('Failed to load problem');
    }
  };

  const handleSubmit = async () => {
    if (!currentProblem || !userAnswer.trim()) return;

    console.log("User's answer:", userAnswer);
    Keyboard.dismiss();

    // Check if answer is correct
    const numericAnswer = parseFloat(userAnswer);
    const correctAnswer = typeof currentProblem.answer === 'number'
      ? currentProblem.answer
      : parseFloat(currentProblem.answer);
    const correct = numericAnswer === correctAnswer;

    setIsCorrect(correct);
    setShowFeedback(true);

    // Update database
    try {
      await db.submitAnswer(currentProblem.id, userAnswer, correct);
    } catch (err) {
      console.error('Failed to save answer:', err);
    }
  };

  const handleNextProblem = () => {
    loadNextProblem();
  };

  if (isLoading) {
    return (
      <View style={[styles.container, styles.centerContent]}>
        <ActivityIndicator size="large" color="#ffd33d" />
        <Text style={styles.loadingText}>Initializing...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.container, styles.centerContent]}>
        <Text style={styles.errorText}>{error}</Text>
        <Button label="Retry" theme="primary" onPress={initializeApp} />
      </View>
    );
  }

  if (!currentProblem) {
    return (
      <View style={[styles.container, styles.centerContent]}>
        <Text style={styles.errorText}>No problem loaded</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.contentWrapper}>
        <ProblemContainer problem={currentProblem} />

        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            placeholder="Your answer"
            placeholderTextColor="#999"
            keyboardType="numeric"
            onChangeText={(text) => {
              setUserAnswer(text);
              // Clear feedback when user starts typing again
              if (showFeedback) {
                setShowFeedback(false);
              }
            }}
            value={userAnswer}
            editable={!showFeedback}
          />
          <Button
            label={showFeedback ? "Next" : "Submit"}
            onPress={showFeedback ? handleNextProblem : handleSubmit}
          />
        </View>

        {showFeedback && (
          <FeedbackSection
            isCorrect={isCorrect}
            solutionSteps={currentProblem.solutionSteps}
          />
        )}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  centerContent: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  contentWrapper: {
    width: '100%',
    maxWidth: 600,
    alignItems: 'center',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 20,
    width: '100%',
    justifyContent: 'space-between',
  },
  input: {
    flex: 1,
    height: 50,
    backgroundColor: '#fff',
    borderRadius: 10,
    paddingHorizontal: 15,
    fontSize: 18,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  loadingText: {
    color: '#fff',
    marginTop: 10,
    fontSize: 16,
  },
  errorText: {
    color: '#ff6b6b',
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
  },
});
