import { SolutionStep } from '../problemGeneration/openaiGenerator';

export interface Problem {
  id: string; // UUID, primary key
  batchId: string; // Foreign key to ProblemBatch
  equation: string;
  direction: string; // e.g., "Solve for x", "Simplify", "Factor"
  answer: string | number | number[]; // Can be array for quadratic solutions
  solutionSteps: SolutionStep[]; // Structured solution steps
  variables: string[]; // Variables used in the problem
  difficulty: 'easy' | 'medium' | 'hard';
  problemType: string; // e.g., 'linear-one-variable', 'quadratic-factoring'
  isCompleted: boolean;
  userAnswer?: string | number | null;
  solutionStepsShown?: boolean; // Track if user viewed solution
  createdAt: string; // ISO 8601 timestamp
  updatedAt: string; // ISO 8601 timestamp
}

// For data before it's inserted, ID might not be present or is generated by DB/code
export type ProblemInput = Omit<Problem, 'id' | 'createdAt' | 'updatedAt'> & { id?: string };

export interface ProblemBatch {
  id: string; // UUID, primary key, e.g., YYYY-MM-DD
  generationDate: string; // ISO 8601 timestamp (when LLM generated it)
  sourceUrl?: string; // S3 URL from where it was fetched
  problemCount: number;
  importedAt: string; // ISO 8601 timestamp (when imported into local DB)
}

export type ProblemBatchInput = Omit<ProblemBatch, 'id' | 'importedAt'> & { id?: string};

export interface UserProgress {
  id: string; // Should be a single constant ID, e.g., 'currentUser'
  currentBatchId?: string | null; // Active batch
  problemsAttempted: number;
  problemsCorrect: number;
  lastSyncTimestamp?: string | null; // ISO 8601 for S3 sync
  createdAt: string;
  updatedAt: string;
}

// Statistics for accuracy broken down by problem type
export interface TopicAccuracy {
  problemType: string;
  attempted: number;
  correct: number;
  incorrect: number;
}

export const CREATE_PROBLEM_BATCHES_TABLE = `
CREATE TABLE IF NOT EXISTS ProblemBatches (
  id TEXT PRIMARY KEY NOT NULL,
  generationDate TEXT NOT NULL,
  sourceUrl TEXT,
  problemCount INTEGER NOT NULL,
  importedAt TEXT NOT NULL
);
`;

export const CREATE_PROBLEMS_TABLE = `
CREATE TABLE IF NOT EXISTS Problems (
  id TEXT PRIMARY KEY NOT NULL,
  batchId TEXT NOT NULL,
  equation TEXT NOT NULL,
  direction TEXT NOT NULL, -- e.g., "Solve for x", "Simplify"
  answer TEXT NOT NULL, -- Store numbers as text to simplify
  solutionSteps TEXT NOT NULL, -- JSON string of SolutionStep[]
  variables TEXT NOT NULL, -- JSON string of variables array
  difficulty TEXT NOT NULL CHECK(difficulty IN ('easy', 'medium', 'hard')),
  problemType TEXT NOT NULL,
  isCompleted INTEGER NOT NULL DEFAULT 0, -- 0 for false, 1 for true
  userAnswer TEXT,
  solutionStepsShown INTEGER NOT NULL DEFAULT 0, -- 0 for false, 1 for true
  createdAt TEXT NOT NULL,
  updatedAt TEXT NOT NULL,
  FOREIGN KEY (batchId) REFERENCES ProblemBatches(id) ON DELETE CASCADE
);
`;

export const CREATE_USER_PROGRESS_TABLE = `
CREATE TABLE IF NOT EXISTS UserProgress (
  id TEXT PRIMARY KEY NOT NULL, -- Should be a single row, e.g., id = 'currentUser'
  currentBatchId TEXT,
  problemsAttempted INTEGER NOT NULL DEFAULT 0,
  problemsCorrect INTEGER NOT NULL DEFAULT 0,
  lastSyncTimestamp TEXT,
  createdAt TEXT NOT NULL,
  updatedAt TEXT NOT NULL,
  FOREIGN KEY (currentBatchId) REFERENCES ProblemBatches(id) ON DELETE SET NULL
);
`;
